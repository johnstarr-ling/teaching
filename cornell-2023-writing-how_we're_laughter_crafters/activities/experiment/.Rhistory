---
title: "R Notebook"
output: html_notebook
---
library(dplyr)
library(dplyr)
myString <- 'hi'
print(myString)
source('~/R/results.R')
source('~/R/results.R')
source('~/R/results.R')
if (auto.colnames){
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
print('cols')
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols))
}
# User-defined function to read in PCIbex Farm results files
read.pcibex <- function(filepath, auto.colnames=TRUE, fun.col=function(col,cols){cols[cols==col]<-paste(col,"Ibex",sep=".");return(cols)}) {
n.cols <- max(count.fields(filepath,sep=",",quote=NULL),na.rm=TRUE)
if (auto.colnames){
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
print('cols')
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols))
}
else{
print('fuck')
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=seq(1:n.cols)))
}
}
# Read in results file
results <- read.pcibex("phon_task.csv")
write.csv(results, 'phon_task_results.csv', row.names=FALSE)
getwd()
else{
print('fuck')
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=seq(1:n.cols)))
}
print('hi
')
else{
print('fuck')
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=seq(1:n.cols)))
}
write.csv(results, 'test.csv')
write.csv(results, 'test.csv')
pwd()
getwd
getwd()
results <- read.pcibex("Results_5.csv")
results <- read.pcibex("Results_5.csv")
head(results)
head(results)
tail(results)
head(results)
colnames(results)
summarySE(results, measurevar="value", groupvars=C("SFP", "both"))
library(Rmisc)
summarySE(results, measurevar="value", groupvars=C("SFP", "both"))
summarySE(results, measurevar="value", groupvars=C("SFP", "both"))
library(ggplot2)
library(Rmisc)
read.pcibex <- function(filepath, auto.colnames=TRUE, fun.col=function(col,cols){cols[cols==col]<-paste(col,"Ibex",sep=".");return(cols)}) {
n.cols <- max(count.fields(filepath,sep=",",quote=NULL),na.rm=TRUE)
if (auto.colnames){
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols))
}
else{
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=seq(1:n.cols)))
}
}
results <- read.pcibex("Results_5.csv")
colnames(results)
summarySE(results, measurevar="value", groupvars=C("SFP", "both"))
library(ggplot2)
install.packages(c("Rmisc", "ggplot2"))
library(ggplot2)
library(Rmisc)
read.pcibex <- function(filepath, auto.colnames=TRUE, fun.col=function(col,cols){cols[cols==col]<-paste(col,"Ibex",sep=".");return(cols)}) {
n.cols <- max(count.fields(filepath,sep=",",quote=NULL),na.rm=TRUE)
if (auto.colnames){
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols))
}
else{
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=seq(1:n.cols)))
}
}
results <- read.pcibex("Results_5.csv")
colnames(results)
summarySE(results, measurevar="value", groupvars=C("SFP", "both"))
summarySE(results, measurevar="value", groupvars=c("SFP", "both"))
summarySE(results, measurevar="Value", groupvars=c("SFP", "both"))
summarySE(results, measurevar="Value", groupvars=c("SFP", "both"), con.interval=0.95)
summarySE(results, measurevar="Value", groupvars=c("SFP", "both"), conf.interval=0.95)
warnings()
R.version
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("tidyverse", dependencies = TRUE)
install.packages("tidyverse", dependencies = TRUE)
variable1 <- 10
variable2 <- 2
my.computation <- variable1 - variable2
library(dplyr)
#install.packages("languageR")  #Uncomment this line if you need to install the package languageR
library(languageR)
data(english) #this command loads the data frame english, included in the languageR package
#### Write your code below ####
#### Write your code below ####
#Write your function below
empty.vector<-c()
#my.function <- function(empty.vector){
##### write the content of the function here #####
#}
#Check your answer:
test<-c(1,10,100,1000)
my.function.result <- my.function(test)
```{r}
variable1 <- 10
variable2 <- 2
my.computation <- variable1 - variable2
variable1 <- 10
variable2 <- 2
my.computation <- variable1 - variable2
#Check your answer:
test<-c(1,10,100,1000)
#my.function.result <- my.function(test)
#r.function.result <- mean(test)
variable1 <- 10
variable2 <- 2
my.computation <- variable1 - variable2
my.computation <- variable1 - variable2
variable1 <- 10
variable2 <- 2
my.computation <- variable1 - variable2
variable1 <- 10
variable2 <- 2
my.computation <- variable1 - variable2
library(dplyr)
#install.packages("languageR")  #Uncomment this line if you need to install the package languageR
library(languageR)
data(english) #this command loads the data frame english, included in the languageR package
#### Write your code below ####
#### Write your code below ####
#Write your function below
empty.vector<-c()
#my.function <- function(empty.vector){
##### write the content of the function here #####
#}
#Check your answer:
test<-c(1,10,100,1000)
#my.function.result <- my.function(test)
#r.function.result <- mean(test)
#if (my.function.result == r.function.result){
#print("TRUE. Congratulations, you are done!")
#  } else {
#    print("FALSE. Try again!")
#    }
rmarkdown::render()
2+2
rmarkdown::render()
source("~/grad_school/research/poetry/experimental_work/results/results.R")
pwd
quit()
setwd("~/grad_school/TAing/fws/activities/experiment")
source("~/grad_school/TAing/fws/activities/experiment/clean_ibex.R")
setwd("~/grad_school/TAing/fws/activities/experiment")
source("~/grad_school/TAing/fws/activities/experiment/clean_ibex.R")
setwd("~/grad_school/TAing/fws/activities/experiment")
source("~/grad_school/TAing/fws/activities/experiment/clean_ibex.R")
setwd("~/grad_school/TAing/fws/activities/experiment")
source("~/grad_school/TAing/fws/activities/experiment/clean_ibex.R")
source("~/grad_school/TAing/fws/activities/experiment/clean_ibex.R")
